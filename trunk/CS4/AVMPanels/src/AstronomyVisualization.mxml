<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:panels="avm.panels.*"
	layout="vertical"
	initialize="createManifest()">
	
	<mx:Style source="../styles/DefaultModalStyle.css"/>
	
	<mx:Metadata>
		[ResourceBundle("controls")]
		[ResourceBundle("SharedResources")]
		[ResourceBundle("formatters")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.adobe.xmp.IXMPPanel;
			import com.adobe.xmp.external.TestFileInfoLibrary;
			import com.adobe.xmp.XMPAccess;
			import com.adobe.xmp.IXMPAccess;
			import com.adobe.xmp.manifest.PanelDescription;
			import com.adobe.xmp.events.XMPEvent;
			
			
			/** The name of the panel, matches the directory name, 
			 *  the swf library (without extension) and the loc file prefix. */
			public static const panelName:String = "AstronomyVisualization";
			/** The FileInfo prefix and namespace */
			public static const xfi:Namespace = new Namespace("http://ns.adobe.com/xmp/fileinfo/");
			/** The relative path to the panel */
			public static const panelPath: String = "../target/" + panelName + "/";
			/** used to fire XMPEvents */
			private var xmpAccess: IXMPAccess;


			/**
			 * The panel manifest is mocked in this test application,
			 * in the FileInfo dialog the panel is initialized with the "real" manifest.
			 */
			private function createManifest(): void
			{
				var manifest: PanelDescription = new PanelDescription();
				manifest.panelPath = panelPath;
				manifest.name = panelName;
				manifest.label = panelName; 
				manifest.description = 
					"The panel name and this description are finally retrieved " +
					"from the attributes 'label' and 'description' in the manifest.";
				manifest.type = PanelDescription.PANELTYPE_CUSTOM;
				manifest.version = 1.0;
				manifest.localizationFile = panelName;
				
				// create panel manifest and initialize the panel with it
				_customPanel.panelDescription = manifest;
				_customPanel.toolTip = manifest.description;
			}

			
			/**
			 * Fire the XMP_READ event. 
			 */
			private function readXMP(event: Event): void
			{
				_customPanel.dispatchEvent(new XMPEvent(XMPEvent.XMP_READ, getXMPAccess()));
			}


			/**
			 * Fire the XMP_WRITE event. 
			 */
			private function writeXMP(event: Event): void
			{
				_customPanel.dispatchEvent(new XMPEvent(XMPEvent.XMP_WRITE, getXMPAccess()));
			}
			
			
			/**
			 * Creates a mocked IXMPAccess instance for test purposes.
			 * The TestFileInfoLibrary simulates the access to the XMP packet.
			 *  
			 * If an XMP property is retrieved, it is initially set to it's xmp path.
			 * When an XMP property is set, the value is remembered in memory.
			 */
			private function getXMPAccess(): IXMPAccess
			{
				if (xmpAccess == null)
				{
					xmpAccess = new XMPAccess(
						new TestFileInfoLibrary(), _customPanel.XMPNamespaces);
				}
				
				return xmpAccess;
			}
		]]>
	</mx:Script>

	<mx:TabNavigator id="fileInfoTabs" width="100%" height="100%">
		<panels:AstronomyVisualization id="_customPanel"/>
	</mx:TabNavigator>
	
	<mx:HBox width="100%" horizontalAlign="right" paddingRight="10">
		<mx:Button label="Read XMP" click="readXMP(event)" toolTip="Simulates the reading of XMP properties."/>
		<mx:Button label="Write XMP" click="writeXMP(event)" toolTip="Simulates the writing of XMP properties."/>
	</mx:HBox>
</mx:Application>